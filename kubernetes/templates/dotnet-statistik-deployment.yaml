{{- if .Values.dotnetStatistik.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-dotnet-statistik
  labels:
    {{- include "sretodo.labels" . | nindent 4 }}
    app.kubernetes.io/component: dotnet-statistik
spec:
  replicas: {{ .Values.dotnetStatistik.replicas }}
  selector:
    matchLabels:
      {{- include "sretodo.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: dotnet-statistik
  template:
    metadata:
      labels:
        {{- include "sretodo.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: dotnet-statistik
    spec:
      # OpenShift compatible security context
      securityContext:
        fsGroup: 1006530000
      containers:
        - name: dotnet-statistik
          image: "python:3.12-slim"
          imagePullPolicy: IfNotPresent
          command: ["python", "-c"]
          args:
            - |
              import http.server
              import socketserver
              import json
              from urllib.parse import urlparse, parse_qs
              
              PORT = 5000
              
              class StatisticsHandler(http.server.SimpleHTTPRequestHandler):
                  def do_GET(self):
                      parsed_path = urlparse(self.path)
                      
                      if parsed_path.path == '/health':
                          self.send_response(200)
                          self.send_header('Content-type', 'application/json')
                          self.end_headers()
                          self.wfile.write(json.dumps({"status": "healthy"}).encode())
                          return
                          
                      if parsed_path.path == '/statistics':
                          self.send_response(200)
                          self.send_header('Content-type', 'application/json')
                          self.end_headers()
                          
                          # Mock statistics data
                          data = {
                              "totalTodos": 42,
                              "completedTodos": 18,
                              "pendingTodos": 24,
                              "error": None
                          }
                          
                          self.wfile.write(json.dumps(data).encode())
                          return
                      
                      # Default response
                      self.send_response(200)
                      self.send_header('Content-type', 'text/plain')
                      self.end_headers()
                      self.wfile.write("Dotnet Statistik Service (Python Mock)".encode())
              
              print(f"Starting Statistics server on port {PORT}")
              httpd = socketserver.TCPServer(("", PORT), StatisticsHandler)
              httpd.serve_forever()
          securityContext:
            runAsNonRoot: true
            runAsUser: 1006530000
            runAsGroup: 1006530000
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          # Health checks
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 15
            periodSeconds: 10
          env:
            - name: TodoServiceUrl
              value: http://{{ .Release.Name }}-java-todo:8080
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://{{ .Release.Name }}-otel-collector:4317
            - name: ASPNETCORE_URLS
              value: http://0.0.0.0:5000
          resources:
            {{- toYaml .Values.dotnetStatistik.resources | nindent 12 }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-dotnet-statistik
  labels:
    {{- include "sretodo.labels" . | nindent 4 }}
    app.kubernetes.io/component: dotnet-statistik
spec:
  type: {{ .Values.dotnetStatistik.service.type }}
  ports:
    - port: 5000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    {{- include "sretodo.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: dotnet-statistik
{{- end }}