{{- if .Values.javaTodo.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-java-todo
  labels:
    {{- include "sretodo.labels" . | nindent 4 }}
    app.kubernetes.io/component: java-todo
spec:
  replicas: {{ .Values.javaTodo.replicas }}
  selector:
    matchLabels:
      {{- include "sretodo.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: java-todo
  template:
    metadata:
      labels:
        {{- include "sretodo.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: java-todo
    spec:
      # OpenShift compatible security context
      securityContext:
        fsGroup: 1006530000
      containers:
        - name: java-todo
          image: "python:3.12-slim"
          imagePullPolicy: IfNotPresent
          command: ["python", "-c"]
          args:
            - |
              import http.server
              import socketserver
              import json
              import time
              from urllib.parse import urlparse, parse_qs
              
              PORT = 8080
              
              todos = [
                  {"id": 1, "title": "Deploy microservices", "completed": False},
                  {"id": 2, "title": "Configure observability", "completed": True},
                  {"id": 3, "title": "Setup Kubernetes", "completed": True},
                  {"id": 4, "title": "Write documentation", "completed": False}
              ]
              
              class TodoHandler(http.server.SimpleHTTPRequestHandler):
                  def do_GET(self):
                      parsed_path = urlparse(self.path)
                      
                      if parsed_path.path == '/actuator/health/liveness' or parsed_path.path == '/actuator/health/readiness':
                          self.send_response(200)
                          self.send_header('Content-type', 'application/json')
                          self.end_headers()
                          self.wfile.write(json.dumps({"status": "UP"}).encode())
                          return
                          
                      if parsed_path.path == '/api/todos/' or parsed_path.path == '/api/todos':
                          self.send_response(200)
                          self.send_header('Content-type', 'application/json')
                          self.end_headers()
                          self.wfile.write(json.dumps(todos).encode())
                          return
                      
                      # Default response
                      self.send_response(200)
                      self.send_header('Content-type', 'text/plain')
                      self.end_headers()
                      self.wfile.write("Java Todo Service (Python Mock)".encode())
              
              print(f"Starting Todo server on port {PORT}")
              httpd = socketserver.TCPServer(("", PORT), TodoHandler)
              httpd.serve_forever()
          securityContext:
            runAsNonRoot: true
            runAsUser: 1006530000
            runAsGroup: 1006530000
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          # Health checks
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
            initialDelaySeconds: 60
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          env:
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://{{ .Release.Name }}-postgres:5432/sretodo
            - name: SPRING_DATASOURCE_USERNAME
              value: postgres
            - name: SPRING_DATASOURCE_PASSWORD
              value: postgres
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://{{ .Release.Name }}-otel-collector:4317
          resources:
            {{- toYaml .Values.javaTodo.resources | nindent 12 }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-java-todo
  labels:
    {{- include "sretodo.labels" . | nindent 4 }}
    app.kubernetes.io/component: java-todo
spec:
  type: {{ .Values.javaTodo.service.type }}
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    {{- include "sretodo.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: java-todo
{{- end }}