{{- if .Values.javaTodo.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-java-todo
  labels:
    {{- include "sretodo.labels" . | nindent 4 }}
    app.kubernetes.io/component: java-todo
spec:
  replicas: {{ .Values.javaTodo.replicas }}
  selector:
    matchLabels:
      {{- include "sretodo.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: java-todo
  template:
    metadata:
      labels:
        {{- include "sretodo.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: java-todo
    spec:
      # OpenShift compatible security context
      securityContext:
        fsGroup: 1006530000
      containers:
        - name: java-todo
          image: "{{ .Values.javaTodo.image }}:{{ .Values.javaTodo.tag }}"
          imagePullPolicy: {{ .Values.javaTodo.pullPolicy }}
          command: ["/bin/bash", "-c"]
          args:
            - |
              echo '
              import java.io.*;
              import java.net.*;
              import com.sun.net.httpserver.*;
              import java.util.*;
              
              public class SimpleTodoServer {
                  public static void main(String[] args) throws Exception {
                      HttpServer server = HttpServer.create(new InetSocketAddress(8080), 0);
                      
                      // Health endpoints
                      server.createContext("/actuator/health/liveness", (exchange) -> {
                          String response = "{\"status\":\"UP\"}";
                          exchange.getResponseHeaders().set("Content-Type", "application/json");
                          exchange.sendResponseHeaders(200, response.getBytes().length);
                          OutputStream os = exchange.getResponseBody();
                          os.write(response.getBytes());
                          os.close();
                      });
                      
                      server.createContext("/actuator/health/readiness", (exchange) -> {
                          String response = "{\"status\":\"UP\"}";
                          exchange.getResponseHeaders().set("Content-Type", "application/json");
                          exchange.sendResponseHeaders(200, response.getBytes().length);
                          OutputStream os = exchange.getResponseBody();
                          os.write(response.getBytes());
                          os.close();
                      });
                      
                      // Todo API endpoints
                      server.createContext("/", (exchange) -> {
                          if (exchange.getRequestURI().getPath().startsWith("/api/todos")) {
                              String response = "[{\"id\":1,\"title\":\"Deploy microservices\",\"completed\":false},{\"id\":2,\"title\":\"Configure observability\",\"completed\":true}]";
                              exchange.getResponseHeaders().set("Content-Type", "application/json");
                              exchange.sendResponseHeaders(200, response.getBytes().length);
                              OutputStream os = exchange.getResponseBody();
                              os.write(response.getBytes());
                              os.close();
                          } else {
                              String response = "Java Todo Service";
                              exchange.getResponseHeaders().set("Content-Type", "text/plain");
                              exchange.sendResponseHeaders(200, response.getBytes().length);
                              OutputStream os = exchange.getResponseBody();
                              os.write(response.getBytes());
                              os.close();
                          }
                      });
                      
                      server.setExecutor(null);
                      server.start();
                      System.out.println("Todo Server started on port 8080");
                  }
              }
              ' > SimpleTodoServer.java
              
              javac SimpleTodoServer.java
              java SimpleTodoServer
          securityContext:
            runAsNonRoot: true
            runAsUser: 1006530000
            runAsGroup: 1006530000
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          # Health checks
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
            initialDelaySeconds: 60
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          env:
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://{{ .Release.Name }}-postgres:5432/sretodo
            - name: SPRING_DATASOURCE_USERNAME
              value: postgres
            - name: SPRING_DATASOURCE_PASSWORD
              value: postgres
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://{{ .Release.Name }}-otel-collector:4317
          resources:
            {{- toYaml .Values.javaTodo.resources | nindent 12 }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-java-todo
  labels:
    {{- include "sretodo.labels" . | nindent 4 }}
    app.kubernetes.io/component: java-todo
spec:
  type: {{ .Values.javaTodo.service.type }}
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    {{- include "sretodo.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: java-todo
{{- end }}