{{- if .Values.pythonPomodoro.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-python-pomodoro
  labels:
    {{- include "sretodo.labels" . | nindent 4 }}
    app.kubernetes.io/component: python-pomodoro
spec:
  replicas: {{ .Values.pythonPomodoro.replicas }}
  selector:
    matchLabels:
      {{- include "sretodo.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: python-pomodoro
  template:
    metadata:
      labels:
        {{- include "sretodo.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: python-pomodoro
    spec:
      # OpenShift compatible security context
      securityContext:
        fsGroup: 1006530000
      containers:
        - name: python-pomodoro
          image: "{{ .Values.pythonPomodoro.image }}:{{ .Values.pythonPomodoro.tag }}"
          imagePullPolicy: {{ .Values.pythonPomodoro.pullPolicy }}
          command: ["python", "-c"]
          args:
            - |
              import http.server
              import socketserver
              import json
              import time
              from urllib.parse import urlparse, parse_qs
              
              PORT = 8002
              
              class PomodoroHandler(http.server.SimpleHTTPRequestHandler):
                  def do_GET(self):
                      parsed_path = urlparse(self.path)
                      
                      if parsed_path.path == '/health':
                          self.send_response(200)
                          self.send_header('Content-type', 'application/json')
                          self.end_headers()
                          self.wfile.write(json.dumps({"status": "OK"}).encode())
                          return
                          
                      if parsed_path.path.startswith('/timers'):
                          self.send_response(200)
                          self.send_header('Content-type', 'application/json')
                          self.end_headers()
                          
                          # Mock pomodoro timer data
                          data = {
                              "user_id": "default_user",
                              "start_time": "2025-04-05T02:30:00Z",
                              "duration_minutes": 25,
                              "end_time": "2025-04-05T02:55:00Z",
                              "is_running": True,
                              "timer_type": "pomodoro"
                          }
                          
                          self.wfile.write(json.dumps(data).encode())
                          return
                      
                      # Default response
                      self.send_response(200)
                      self.send_header('Content-type', 'text/plain')
                      self.end_headers()
                      self.wfile.write("Python Pomodoro Service".encode())
              
              print(f"Starting server on port {PORT}")
              httpd = socketserver.TCPServer(("", PORT), PomodoroHandler)
              httpd.serve_forever()
          securityContext:
            runAsNonRoot: true
            runAsUser: 1006530000
            runAsGroup: 1006530000
          ports:
            - name: http
              containerPort: 8002
              protocol: TCP
          # Health checks
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 15
            periodSeconds: 10
          env:
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://{{ .Release.Name }}-otel-collector:4317
            - name: TODO_SERVICE_URL
              value: http://{{ .Release.Name }}-java-todo:8080
          resources:
            {{- toYaml .Values.pythonPomodoro.resources | nindent 12 }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-python-pomodoro
  labels:
    {{- include "sretodo.labels" . | nindent 4 }}
    app.kubernetes.io/component: python-pomodoro
spec:
  type: {{ .Values.pythonPomodoro.service.type }}
  ports:
    - port: 8002
      targetPort: http
      protocol: TCP
      name: http
  selector:
    {{- include "sretodo.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: python-pomodoro
{{- end }}